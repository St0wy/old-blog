---
// Mostly taken from here : https://github.com/cassidyjames/cassidyjames.github.io/blob/main/_includes/comments.html
import LinkButton from "./LinkButton.astro";
import { SITE } from "@config";

export interface Props {
  commentsPostId: string;
}

const { commentsPostId } = Astro.props;
const mastodonPostUrl = `https://${SITE.comments.host}/${SITE.comments.username}/${commentsPostId}`;
---

<mastodon-comments
  id="comments"
  class="article comments"
  data-comments-post-id={commentsPostId}
>
  <h2 style="font-size: 24px; font-weight: 700;line-height: 32px; font-variation-settings: normal">Comments</h2>
  <p>
    Comment on this blog post by publicly replying to <LinkButton
      className="hover:text-skin-accent underline underline-offset-4 decoration-dashed"
      href={mastodonPostUrl}
    >
      this Mastodon post
    </LinkButton>
    using a Mastodon or other ActivityPub/&ZeroWidthSpace;Fediverse account. Known
    non-private replies are displayed below.
  </p>

  <div id="comments-wrapper">
    <p>
      <small
        >No known comments, yet. Reply to <LinkButton
          className="hover:text-skin-accent underline underline-offset-4 decoration-dashed"
          href={mastodonPostUrl}
        >
          this Mastodon post
        </LinkButton> to add your own!</small
      >
    </p>
    <noscript
      ><p>
        Loading comments relies on JavaScript. Try enabling JavaScript and
        reloading, or visit <LinkButton
          className="hover:text-skin-accent underline underline-offset-4 decoration-dashed"
          href={mastodonPostUrl}
        >
          the original post
        </LinkButton> on Mastodon.
      </p></noscript
    >
  </div>
</mastodon-comments>

<script>
  import { SITE } from "@config";
  class MastodonComments extends HTMLElement {
    constructor() {
      super();

      const commentsPostId = this.dataset.commentsPostId;

      if (commentsPostId) {
        loadComments(commentsPostId);
      }
    }
  }

  window.customElements.define("mastodon-comments", MastodonComments);

  function loadComments(id: string) {
    const HOST = SITE.comments.host;
    const USERNAME = SITE.comments.username;
    const ID = id;

    const SUPPORTED_MEDIA = ["image", "gifv"];

    const STATUS_URL = `https://${HOST}/api/v1/statuses/${ID}`;

    const REQUEST_HEADERS = new Headers();

    const requestOptions: RequestInit = {
      method: "GET",
      headers: REQUEST_HEADERS,
      mode: "cors",
      cache: "default",
    };

    const STATUS_REQUEST = new Request(STATUS_URL, requestOptions);
    const CONTEXT_REQUEST = new Request(
      STATUS_URL + "/context",
      requestOptions
    );

    let commentsWrapper = document.getElementById("comments-wrapper");

    fetch(STATUS_REQUEST)
      .then(response => {
        return response.json();
      })
      .then(status => {
        fetch(CONTEXT_REQUEST)
          .then(response => {
            return response.json();
          })
          .then(data => {
            let descendants = data["descendants"];
            if (
              descendants &&
              Array.isArray(descendants) &&
              descendants.length > 0
            ) {
              if (commentsWrapper === null) {
                return;
              }
              commentsWrapper.innerHTML = "";
              descendants.unshift(status);

              descendants.forEach(status => {
                if (status.account.display_name.length > 0) {
                  status.account.display_name = escapeHtml(
                    status.account.display_name
                  );
                  status.account.display_name = emojify(
                    status.account.display_name,
                    status.account.emojis
                  );
                } else {
                  status.account.display_name = status.account.username;
                }

                let instance = "";
                if (status.account.acct.includes("@")) {
                  instance = status.account.acct.split("@")[1];
                } else {
                  instance = HOST;
                }

                status.content = emojify(status.content, status.emojis);

                let avatarSource = document.createElement("source");
                avatarSource.setAttribute(
                  "srcset",
                  escapeHtml(status.account.avatar)
                );
                avatarSource.setAttribute(
                  "media",
                  "(prefers-reduced-motion: no-preference)"
                );

                let avatarImg = document.createElement("img");
                avatarImg.className = "avatar";
                avatarImg.setAttribute(
                  "src",
                  escapeHtml(status.account.avatar_static)
                );
                avatarImg.setAttribute(
                  "alt",
                  `@${status.account.username}@${instance} avatar`
                );

                let avatarPicture = document.createElement("picture");
                avatarPicture.appendChild(avatarSource);
                avatarPicture.appendChild(avatarImg);

                let avatar = document.createElement("a");
                avatar.className = "avatar-link";
                avatar.setAttribute("href", status.account.url);
                avatar.setAttribute("rel", "external nofollow");
                avatar.setAttribute(
                  "title",
                  `View profile at @${status.account.username}@${instance}`
                );
                avatar.appendChild(avatarPicture);

                let instanceBadge = document.createElement("a");
                instanceBadge.className = "instance";
                instanceBadge.setAttribute("href", status.account.url);
                instanceBadge.setAttribute(
                  "title",
                  `@${status.account.username}@${instance}`
                );
                instanceBadge.setAttribute("rel", "external nofollow");
                instanceBadge.textContent = instance;

                let display = document.createElement("span");
                display.className = "display";
                display.setAttribute("itemprop", "author");
                display.setAttribute("itemtype", "http://schema.org/Person");
                display.innerHTML = status.account.display_name;

                let header = document.createElement("header");
                header.className = "author";
                header.appendChild(display);
                header.appendChild(instanceBadge);

                let permalink = document.createElement("a");
                permalink.setAttribute("href", status.url);
                permalink.setAttribute("itemprop", "url");
                permalink.setAttribute("title", `View comment at ${instance}`);
                permalink.setAttribute("rel", "external nofollow");
                permalink.setAttribute
                permalink.textContent = new Date(
                  status.created_at
                ).toLocaleString("en-US", {
                  dateStyle: "long",
                  timeStyle: "short",
                });

                let timestamp = document.createElement("time");
                timestamp.setAttribute("datetime", status.created_at);
                timestamp.appendChild(permalink);

                if (status.edited_at != null) {
                  timestamp.classList.add("edited");
                  timestamp.setAttribute(
                    "title",
                    "Edited " +
                      new Date(status.edited_at).toLocaleString("en-US", {
                        dateStyle: "long",
                        timeStyle: "short",
                      })
                  );
                }

                let main = document.createElement("main");
                main.setAttribute("itemprop", "text");

                if (status.sensitive == true || status.spoiler_text != "") {
                  let summary = document.createElement("summary");
                  if (status.spoiler_text == "") {
                    status.spoiler_text == "Sensitive";
                  }
                  summary.innerHTML = status.spoiler_text;

                  let spoiler = document.createElement("details");
                  spoiler.appendChild(summary);
                  spoiler.innerHTML += status.content;

                  main.appendChild(spoiler);
                } else {
                  main.innerHTML = status.content;
                }

                let interactions = document.createElement("footer");

                if (status.favourites_count > 0) {
                  let faves = document.createElement("span");
                  faves.className = "faves";
                  faves.setAttribute("title", "Favorites");
                  faves.textContent = status.favourites_count;

                  interactions.appendChild(faves);
                }

                if (status.reblogs_count > 0) {
                  let boosts = document.createElement("span");
                  boosts.className = "boosts";
                  boosts.setAttribute("title", "Boosts");
                  boosts.textContent = status.reblogs_count;

                  interactions.appendChild(boosts);
                }

                let comment = document.createElement("article");
                comment.id = `comment-${status.id}`;
                comment.className = "comment";
                comment.setAttribute("itemprop", "comment");
                comment.setAttribute("itemtype", "http://schema.org/Comment");
                comment.appendChild(avatar);
                comment.appendChild(header);
                comment.appendChild(timestamp);
                comment.appendChild(main);

                let attachments = status.media_attachments;
                if (
                  attachments &&
                  Array.isArray(attachments) &&
                  attachments.length > 0
                ) {
                  attachments.forEach(attachment => {
                    if (SUPPORTED_MEDIA.includes(attachment.type)) {
                      let media = document.createElement("a");
                      media.className = "card";
                      media.setAttribute("href", attachment.url);
                      media.setAttribute("rel", "external nofollow");

                      let mediaElement;
                      switch (attachment.type) {
                        case "image":
                          mediaElement = document.createElement("img");
                          mediaElement.setAttribute(
                            "src",
                            attachment.preview_url
                          );

                          if (attachment.description != null) {
                            mediaElement.setAttribute(
                              "alt",
                              attachment.description
                            );
                            mediaElement.setAttribute(
                              "title",
                              attachment.description
                            );
                          }

                          media.appendChild(mediaElement);
                          break;

                        case "gifv":
                          mediaElement = document.createElement("video");
                          mediaElement.setAttribute("src", attachment.url);
                          mediaElement.setAttribute("autoplay", "");
                          mediaElement.setAttribute("playsinline", "");
                          mediaElement.setAttribute("loop", "");

                          if (attachment.description != null) {
                            mediaElement.setAttribute(
                              "aria-title",
                              attachment.description
                            );
                            mediaElement.setAttribute(
                              "title",
                              attachment.description
                            );
                          }

                          media.appendChild(mediaElement);
                          break;
                      }

                      comment.appendChild(media);
                    }
                  });
                } else if (
                  status.card != null &&
                  status.card.image != null &&
                  !status.card.url.startsWith("{{ site.url }}")
                ) {
                  let cardImg = document.createElement("img");
                  cardImg.setAttribute("src", status.card.image);

                  let cardTitle = document.createElement("h5");
                  cardTitle.innerHTML = status.card.title;

                  let cardDescription = document.createElement("p");
                  cardDescription.innerHTML = status.card.description;

                  let cardCaption = document.createElement("figcaption");
                  cardCaption.appendChild(cardTitle);
                  cardCaption.appendChild(cardDescription);

                  let cardFigure = document.createElement("figure");
                  cardFigure.appendChild(cardImg);
                  cardFigure.appendChild(cardCaption);

                  let card = document.createElement("a");
                  card.className = "card";
                  card.setAttribute("href", status.card.url);
                  card.setAttribute("rel", "external nofollow");
                  card.appendChild(cardFigure);

                  comment.appendChild(card);
                }

                comment.appendChild(interactions);

                if (status.account.acct == USERNAME) {
                  comment.classList.add("op");

                  avatar.classList.add("op");
                  avatar.setAttribute(
                    "title",
                    "Blog post author; " + avatar.getAttribute("title")
                  );

                  instanceBadge.classList.add("op");
                  instanceBadge.setAttribute(
                    "title",
                    "Blog post author: " + instanceBadge.getAttribute("title")
                  );
                }

                if (commentsWrapper === null) {
                  return;
                }
                commentsWrapper.innerHTML += comment.outerHTML;
              });
            }
          });
      });
  }

  interface Emoji {
    shortcode: string;
    url: string;
    static_url: string;
    visible_in_picker: boolean;
  }

  function emojify(input: string, emojis: Array<Emoji>) {
    let output = input;

    emojis.forEach(emoji => {
      let picture = document.createElement("picture");

      let source = document.createElement("source");
      source.setAttribute("srcset", escapeHtml(emoji.url));
      source.setAttribute("media", "(prefers-reduced-motion: no-preference)");

      let img = document.createElement("img");
      img.className = "emoji";
      img.setAttribute("src", escapeHtml(emoji.static_url));
      img.setAttribute("alt", `:${emoji.shortcode}:`);
      img.setAttribute("title", `:${emoji.shortcode}:`);
      img.setAttribute("width", "20");
      img.setAttribute("height", "20");

      picture.appendChild(source);
      picture.appendChild(img);

      output = output.replace(`:${emoji.shortcode}:`, picture.outerHTML);
    });

    return output;
  }

  function escapeHtml(unsafe: string) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/'/g, "&apos;")
      .replace(/"/g, "&quot;");
  }
</script>

<style>
  mastodon-comments#comments {
    .comment {
      display: grid;
      column-gap: 1rem;
      grid-template-areas:
        "avatar name"
        "avatar time"
        "avatar post"
        "...... card"
        "...... interactions";
      grid-template-columns: min-content;
      justify-items: start;
      margin: 0em auto 0em -1em;
      padding: 1em;

      .avatar-link {
        grid-area: avatar;
        height: 4rem;
        position: relative;
        width: 4rem;

        .avatar {
          height: 100%;
          width: 100%;
        }

        &.op::after {
          background-color: var(--secondary-accent-color);
          border-radius: 50%;
          bottom: -0.25rem;
          color: var(--secondary-accent-contrast);
          content: "✓";
          display: block;
          font-size: 1.25rem;
          font-weight: bold;
          height: 1.5rem;
          line-height: 1.5rem;
          position: absolute;
          right: -0.25rem;
          text-align: center;
          width: 1.5rem;
        }
      }

      .author {
        align-items: center;
        cursor: default;
        display: flex;
        font-weight: bold;
        gap: 0.5em;
        grid-area: name;

        .instance {
          background-color: var(--faint);
          border-radius: 9999px;
          color: var(--neutral);
          font-size: smaller;
          font-weight: normal;
          padding: 0.25em 0.75em;

          &:hover {
            opacity: 0.8;
            text-decoration: none;
          }

          &.op {
            background-color: var(--secondary-accent-color);
            color: var(--secondary-accent-contrast);

            &::before {
              content: "✓";
              font-weight: bold;
              margin-inline-end: 0.25em;
              margin-inline-start: -0.25em;
            }
          }
        }
      }

      time {
        @extend small;

        grid-area: time;
        line-height: 1.5rem;

        &.edited::after {
          content: " *";
        }
      }

      main {
        grid-area: post;
        justify-self: stretch;

        p:first-child {
          margin-top: 0.25em;
        }

        p:last-child {
          margin-bottom: 0;
        }
      }

      .card {
        color: inherit;
        grid-area: card;
        max-width: 400px;

        &:hover {
          text-decoration: none;
        }

        figure {
          border-radius: inherit;
          overflow: hidden;
        }

        figcaption {
          display: grid;
          gap: 0.5em;
          margin: 0;
          padding: 1em;
          text-align: left;

          * {
            display: -webkit-box;
            line-height: 1.25;
            margin: 0;
            overflow: hidden;
            padding: 0;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2;
          }
        }
      }

      // Hide the card from the shared post
      &:first-of-type .card {
        display: none;
      }

      footer {
        @extend small;

        display: flex;
        gap: 1.25em;
        grid-area: interactions;
        margin-top: 0.925rem;

        .faves {
          cursor: default;

          &::before {
            color: var(--accent-color);
            content: "♥";
            margin-inline-end: 0.25em;
          }
        }

        .boosts {
          cursor: default;

          &::before {
            color: var(--secondary-accent-color);
            content: "🔁";
            margin-inline-end: 0.25em;
          }
        }
      }

      .emoji {
        display: inline;
        height: 1.25em;
        vertical-align: middle;
        width: 1.25em;
      }

      .invisible {
        display: none;
      }

      .ellipsis::after {
        content: "…";
      }

      details {
        summary {
          background-image: linear-gradient(
              90deg,
              transparent,
              transparent 0.4rem,
              var(--faint) 0.4rem,
              var(--faint) calc(100% - 0.4rem),
              transparent calc(100% - 0.4rem),
              transparent
            ),
            repeating-linear-gradient(
              45deg,
              var(--faint),
              var(--faint) 0.3rem,
              var(--accent-color) 0.3rem,
              var(--accent-color) 0.6rem
            );
          border-radius: 0.25rem;
          color: inherit;
          cursor: default;
          margin-top: 0.925rem;
          padding: 1em;

          &::after {
            content: "▸";
            display: inline-block;
            margin-left: 0.5em;
            transition: transform 250ms ease;
          }
        }

        &[open] summary::after {
          transform: rotate(90deg);
        }
      }
    }
  }
</style>
